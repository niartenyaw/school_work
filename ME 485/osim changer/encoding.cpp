/** * File: encoding.cpp * ------------------ * Place your Encoding class implementation here. */#include "encoding.h"#include "strlib.h"#include <iostream>using namespace std;Encoding::Encoding(){}Encoding::~Encoding(){}void Encoding::compress(ibstream& infile, obstream& outfile){    string line;    getline(infile, line);    bool changing = false;    while(true){        findMuscle(line, infile, outfile, changing);        getline(infile, line);        if(infile.fail()) break;    }}void Encoding::findMuscle(string line, ibstream& infile, obstream& outfile, bool& changing){    string name;    int one = -1;    int two = -1;    //Finds the string between < and >    for(int i = 0; i < line.length(); i++){        if(line[i] == '<'){            one = i;        }        if(line[i] == '>'){            two = i;            break;        }    }    // Finds the first word within the brackets.    for(int i = one + 1; i < two; i++){        if(line[i] == ' ' || line[i] == '>') break;        name += line[i];    }    // If start of muscle, make changes.    if(name == "Thelen2003Muscle"){        line.replace(one + 1, name.length(), "FatigableMuscle");        outfile << line << endl;        changing = true;    }    else if(name == "/GeometryPath" && changing){        outfile << line << endl;        outfile << "				<!--The maximum force this actuator can produce.--> " << endl;        outfile << "				<optimal_force>1</optimal_force>" << endl;        for(int i = 0; i < 7; i++){            getline(infile, line);            outfile << line << endl;        }        outfile << "				<pennation_angle_at_optimal>";        getline(infile, line);        // Gets number for pennation angle        string number = "";        bool start = false;        for(int i =0; i < line.length(); i++){            if(line[i] == '>'){                start = true;            }            else if(start){                if(line[i] == '<') break;                number = number + line[i];            }        }        outfile << number;        outfile << "</pennation_angle_at_optimal>" << endl;        outfile << "				<max_contraction_velocity>10</max_contraction_velocity>" << endl        << "				<!--Compute muscle dynamics ignoring tendon compliance. Tendon is assumed to be rigid.-->" << endl        << "				<ignore_tendon_compliance>false</ignore_tendon_compliance>" << endl        << "				<!--Compute muscle dynamics ignoring activation dynamics. Activation is equivalent to excitation.-->" << endl        << "				<ignore_activation_dynamics>false</ignore_activation_dynamics>" << endl        << "				<!--assumed initial activation level if none is assigned.-->" << endl        << "				<default_activation>1</default_activation>" << endl        << "				<!--assumed initial fiber length if none is assigned.-->" << endl        << "				<default_fiber_length>0.1</default_fiber_length>" << endl        << "				<!--activation dynamics model with a lower bound-->" << endl        << "				<MuscleFirstOrderActivationDynamicModel>" << endl        << "				<!--activation time constant in seconds-->" << endl        << "				<activation_time_constant>0.01</activation_time_constant>" << endl        << "				<!--deactivation time constant in seconds-->" << endl        << "				<deactivation_time_constant>0.04</deactivation_time_constant>" << endl        << "				<!--activation lower bound-->" << endl        << "				<minimum_activation>0.01</minimum_activation>" << endl        << "				</MuscleFirstOrderActivationDynamicModel>" << endl        << "				<!--active force length curve-->" << endl        << "				<ActiveForceLengthCurve>" << endl        << "                    <!--normalized fiber length which the steep ascending limb starts-->" << endl        << "                    <min_norm_active_fiber_length>0.4441</min_norm_active_fiber_length>" << endl        << "                    <!--normalized fiber length which the steep ascending limb transitions to the shallow ascending limb-->" << endl        << "                    <transition_norm_fiber_length>0.6259</transition_norm_fiber_length>" << endl        << "                    <!--normalized fiber length which the descending limb ends-->" << endl        << "                    <max_norm_active_fiber_length>1.8123</max_norm_active_fiber_length>" << endl        << "                    <!--slope of the shallow ascending limb-->" << endl        << "                    <shallow_ascending_slope>0.8616</shallow_ascending_slope>" << endl        << "                    <!--minimum value of the active force length curve-->" << endl        << "                       <minimum_value>0.1</minimum_value>" << endl        << "				</ActiveForceLengthCurve>" << endl        << "				<!--force velocity inverse curve-->" << endl        << "				<ForceVelocityInverseCurve>" << endl        << "                    <!--curve slope at the maximum normalized concentric contraction velocity (-1)-->" << endl        << "                    <min_concentric_slope>0.1</min_concentric_slope>" << endl        << "                    <!--curve slope at isometric (normalized fiber velocity of 0)-->" << endl        << "                    <isometric_slope>5</isometric_slope>" << endl        << "                    <!--curve slope at the maximum normalized eccentric contraction velocity (1)-->" << endl        << "                    <min_eccentric_slope>0.1</min_eccentric_slope>" << endl        << "                    <!--curve value at the maximum normalized eccentric contraction velocity-->" << endl        << "                    <max_eccentric_velocity_force_multiplier>1.4</max_eccentric_velocity_force_multiplier>" << endl        << "                    <!--concentric curve bend, from linear to maximum bend (0-1)-->" << endl        << "                    <concentric_curviness>0.5</concentric_curviness>" << endl        << "                    <!--eccentric curve bend, from linear to maximum bend (0-1)-->" << endl        << "                    <eccentric_curviness>0.9</eccentric_curviness>" << endl        << "				</ForceVelocityInverseCurve>" << endl        << "				<!--fiber force length curve-->" << endl        << "				<FiberForceLengthCurve>" << endl        << "                    <!--Fiber strain at zero force-->" << endl        << "                    <strain_at_zero_force>0</strain_at_zero_force>" << endl        << "                    <!--Fiber strain at a tension of 1 normalized force-->" << endl        << "                    <strain_at_one_norm_force>0.6</strain_at_one_norm_force>" << endl        << "                    <!--Fiber stiffness at a tension of 1 normalized force-->" << endl        << "                    <stiffness_at_one_norm_force></stiffness_at_one_norm_force>" << endl        << "                    <!--Fiber curve bend, from linear to maximum bend (0-1)-->" << endl        << "                    <curviness></curviness>" << endl        << "				</FiberForceLengthCurve>" << endl        << "				<!--Tendon force length curve-->" << endl        << "				<TendonForceLengthCurve>" << endl        << "                    <!--tendon strain at a tension of 1 normalized force-->" << endl        << "                    <strain_at_one_norm_force>0.03300</strain_at_one_norm_force>" << endl        << "                    <!--tendon stiffness at a tension of 1 normalized force-->" << endl        << "                    <stiffness_at_one_norm_force></stiffness_at_one_norm_force>" << endl        << "                    <!--normalized force developed at the end of the toe region-->" << endl        << "                    <norm_force_at_toe_end></norm_force_at_toe_end>" << endl        << "                    <!--tendon curve bend, from linear to maximum bend (0-1)-->" << endl        << "                    <curviness></curviness>" << endl        << "				</TendonForceLengthCurve>" << endl        << "				<fatigue_factor>0.5</fatigue_factor>" << endl        << "				<recovery_factor>0.1</recovery_factor>" << endl;        for(int i = 0; i < 25; i++){            getline(infile, line);        }        outfile << "			</FatigableMuscle>" << endl;        changing = false;    }    else{        outfile << line << endl;    }}